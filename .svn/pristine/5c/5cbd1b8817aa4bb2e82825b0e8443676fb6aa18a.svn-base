package kr.or.warehouse.service;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.warehouse.command.Criteria;
import kr.or.warehouse.command.PageMaker;
import kr.or.warehouse.command.WorkModifyCommand;
import kr.or.warehouse.controller.view.OrganizationNode;
import kr.or.warehouse.dao.WorkDAO;
import kr.or.warehouse.dto.CooperReqVO;
import kr.or.warehouse.dto.DepartmentVO;
import kr.or.warehouse.dto.EmployeeVO;
import kr.or.warehouse.dto.WorkManagerVO;
import kr.or.warehouse.dto.WorkVO;

@Service
public class WorkServiceImpl implements WorkService{

	@Autowired
	private WorkDAO workDAO;

	private List<WorkVO> setWorkInfo(List<WorkVO> workList) throws SQLException{
		for(WorkVO work : workList) {
			//업무 담당자, 요청자 정보 가져오기
			String wcode = work.getWcode();
			List<WorkManagerVO> workManagerList = workDAO.selectWorkManagerList(wcode);
			EmployeeVO requestBy = workDAO.selectWorkRequestBy(wcode);
			work.setRequestBy(requestBy);
			work.setWorkManagerList(workManagerList);
			work.setManagerCnt(workManagerList.size() - 1);
			setDday(work);

			//요청대기일자, 마감임박표시
			if(work.getWstatus().equals("대기")) {
				// regDate + 3 < today
				setOverDay(work);
			}

		}
		return workList;
	}

	private void setDday(WorkVO work) {
		Date endDate = work.getWend();
		Date today = new Date();
		if(endDate.after(today)) {
			long endTime = endDate.getTime();
			long todayTime = today.getTime();
			long dTime = endTime - todayTime;
			int dDay = (int)(dTime / (24 * 60 * 60 * 1000));
			work.setdDay(dDay);
		}
	}

	private void setOverDay(WorkVO work) {
		Date today = new Date();
		Date regDate = work.getWdate();
		Calendar cal = Calendar.getInstance();
		cal.setTime(regDate);
		cal.add(Calendar.DATE, 3);
		if(today.after(cal.getTime())) {
			long todayTime = today.getTime();
			long regTime = regDate.getTime();
			long overTime = todayTime - regTime;
			int overDay = (int)(overTime/(24 * 60 * 60 * 1000));
			work.setOverDay(overDay);
		}
	}

	private void setWorkReadCheck(List<WorkVO> workList, int eno) throws SQLException{
		for(WorkVO work : workList) {
			int cnt = workDAO.workReadCheck(work.getWcode(), eno);
			if(cnt > 0) {
				work.setWcheck(1);
			}
		}
	}

	private Map<String, Integer> setNoneCheckCnt(List<WorkVO> workList, int eno) throws SQLException {
		Map<String, Integer> noneCheckMap = new HashMap<String, Integer>();
		noneCheckMap.put("0", 0);
		noneCheckMap.put("1", 0);
		noneCheckMap.put("2", 0);
		noneCheckMap.put("3", 0);
		noneCheckMap.put("4", 0);
		noneCheckMap.put("5", 0);
		noneCheckMap.put("6", 0);

		for(WorkVO work : workList) {
			if(work.getWstatus().equals("대기")) {
				addCnt(noneCheckMap, work, eno, "0");
			}
			if(work.getWstatus().equals("진행")) {
				addCnt(noneCheckMap, work, eno, "1");
			}
			if(work.getWstatus().equals("완료")) {
				addCnt(noneCheckMap, work, eno, "2");
			}
			if(work.getWstatus().equals("이의신청")) {
				addCnt(noneCheckMap, work, eno, "3");
			}
			if(work.getWstatus().equals("협업요청")) {
				addCnt(noneCheckMap, work, eno, "4");
			}
			if(work.getWstatus().equals("대리요청")) {
				addCnt(noneCheckMap, work, eno, "5");
			}
		}

		return noneCheckMap;
	}

	private void addCnt(Map<String, Integer>noneCheckMap, WorkVO work, int eno, String wstatus) throws SQLException {
		int cnt = workDAO.workReadCheck(work.getWcode(), eno);
		if(cnt == 0) {
			noneCheckMap.put(wstatus, noneCheckMap.get(wstatus) + 1);
			noneCheckMap.put("6", noneCheckMap.get("6") + 1);
		}
	}

	public List<OrganizationNode> organization(List<DepartmentVO> depList){
		List<OrganizationNode> nodeList = new ArrayList<OrganizationNode>();

		for(DepartmentVO dep : depList) {
			OrganizationNode node = new OrganizationNode();
			node.setId(Integer.toString(dep.getDno()));
			node.setText(dep.getDname());
			if(dep.getUpdno() == 0) {
				node.setParent("#");
			}else {
				node.setParent(Integer.toString(dep.getUpdno()));
			}

			if(dep.getEmpList().size() > 0) {
				List<EmployeeVO> empList = dep.getEmpList();
				for(EmployeeVO emp : empList) {
					OrganizationNode childNode = new OrganizationNode();
					childNode.setId(Integer.toString(emp.getEno()));
					childNode.setText(emp.getName());
					childNode.setParent(Integer.toString(dep.getDno()));
					childNode.setIcon("fas fa-user");
					nodeList.add(childNode);

				}
			}

			node.setIcon("fas fa-building");

			nodeList.add(node);
		}

		return nodeList;
	}

	@Override
	public Map<String, Object> getMyWorkList(Criteria cri, int statusNo, int eno) throws SQLException {
		String wstatus = statusNo == 0 ? "대기" : statusNo == 1 ? "진행" : statusNo == 2 ? "완료" : statusNo == 3 ? "이의신청" :
			statusNo == 4 ? "협업요청" : statusNo == 5 ? "대리요청" : "전체";

		Map<String, Object> dataMap = new HashMap<String, Object>();

		//workList
		List<WorkVO> myWorkList = null;
		int totalCount = 0;
		if(wstatus.equals("전체")) {
			myWorkList = workDAO.selectMyWorkAllStatusList(eno, cri);
		}else {
			myWorkList = workDAO.selectMyWorkList(eno,wstatus,cri);
		}
		totalCount = workDAO.selectMyWorkTotalCount(eno, wstatus,cri);

		//pageMaker
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		myWorkList = setWorkInfo(myWorkList);
		setWorkReadCheck(myWorkList, eno);
		for(WorkVO work : myWorkList) {
			String hashTag = workDAO.selectHashTagByWcode(work.getWcode());
			work.setHashTag(hashTag);
		}



		dataMap.put("myWorkList", myWorkList);
		dataMap.put("pageMaker", pageMaker);
		dataMap.put("statusNo", statusNo);

		return dataMap;
	}

	@Override
	public Map<String, Integer> getNoneCheckCnt(String referMcode, Criteria cri, int eno, int dno) throws SQLException {

		List<WorkVO> selectWorkAllStatusList = null;
		//nonCheckWorkList
		if(referMcode.equals("M113000")) {
			selectWorkAllStatusList = workDAO.selectMyWorkReadCheckList(eno, cri);
		}

		if(referMcode.equals("M114000")) {
			selectWorkAllStatusList = workDAO.selectToReqReadCheckList(eno, cri);
		}

		if(referMcode.equals("M115000")) {
			selectWorkAllStatusList = workDAO.selectDepWorkReadCheckList(dno, cri);
		}
		selectWorkAllStatusList = setWorkInfo(selectWorkAllStatusList);
		Map<String, Integer> noneCheckCnt = setNoneCheckCnt(selectWorkAllStatusList,eno);

		return noneCheckCnt;
	}

	@Override
	public Map<String, Object> getToReqList(Criteria cri, int statusNo, int eno) throws SQLException {

		String wstatus = statusNo == 0 ? "대기" : statusNo == 1 ? "진행" : statusNo == 2 ? "완료" : statusNo == 3 ? "이의신청" :
			statusNo == 4 ? "협업요청" : statusNo == 5 ? "대리요청" : "전체";

		Map<String, Object> dataMap = new HashMap<String, Object>();

		//workList
		List<WorkVO> toReqList = null;
		int totalCount = 0;
		if(wstatus.equals("전체")) {
			toReqList = workDAO.selectToReqAllStatusList(eno, cri);
		}else {
			toReqList = workDAO.selectToReqList(eno, wstatus, cri);
		}
		totalCount = workDAO.selectToReqTotalCount(eno, wstatus, cri);

		//pageMaker
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		toReqList = setWorkInfo(toReqList);
		setWorkReadCheck(toReqList, eno);
		for(WorkVO work : toReqList) {
			String hashTag = workDAO.selectHashTagByWcode(work.getWcode());
			work.setHashTag(hashTag);
		}



		dataMap.put("toReqList", toReqList);
		dataMap.put("pageMaker", pageMaker);
		dataMap.put("statusNo", statusNo);

		return dataMap;
	}

	@Override
	public Map<String, Object> getDepWorkList(Criteria cri, int statusNo, int eno, int dno) throws SQLException {
		String wstatus = statusNo == 0 ? "대기" : statusNo == 1 ? "진행" : statusNo == 2 ? "완료" : statusNo == 3 ? "이의신청" :
			statusNo == 4 ? "협업요청" : statusNo == 5 ? "대리요청" : "전체";

		Map<String, Object> dataMap = new HashMap<String, Object>();

		//workList
		List<WorkVO> depWorkList = null;
		int totalCount = 0;
		if(wstatus.equals("전체")) {
			depWorkList = workDAO.selectDepWorkAllStatusList(dno, cri);
		}else {
			depWorkList = workDAO.selectDepWorkList(dno, wstatus, cri);
		}
		totalCount = workDAO.selectDepWorkTotalCount(dno, wstatus, cri);

		//pageMaker
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		depWorkList = setWorkInfo(depWorkList);
		setWorkReadCheck(depWorkList, eno);
		for(WorkVO work : depWorkList) {
			String hashTag = workDAO.selectHashTagByWcode(work.getWcode());
			work.setHashTag(hashTag);
		}



		dataMap.put("depWorkList", depWorkList);
		dataMap.put("pageMaker", pageMaker);
		dataMap.put("statusNo", statusNo);

		return dataMap;
	}

	@Override
	public WorkVO getWorkByWcode(String wcode) throws SQLException {
		WorkVO work = workDAO.selectWorkByWcode(wcode);
		EmployeeVO requestBy = workDAO.selectWorkRequestBy(wcode);
		List<WorkManagerVO> workManagerList = workDAO.selectWorkManagerList(wcode);
		String hashTag = workDAO.selectHashTagByWcode(wcode);

		work.setWorkManagerList(workManagerList);
		work.setRequestBy(requestBy);
		work.setHashTag(hashTag);

		return work;
	}

	@Override
	public void modifyMyWork(WorkVO work) throws SQLException {
		workDAO.updateMyWork(work);
		workDAO.updateWorkHashTag(work);
	}

	@Override
	public void myWorkCooperReq(CooperReqVO cooper, int eno) throws SQLException {
		cooper.setEno(eno);
		workDAO.insertCooperReq(cooper);
		workDAO.updateWorkManagerAnswer(cooper);
		workDAO.updateWorkWstatus(cooper.getWcode(), "협업요청", "B105");
		workDAO.updateHashTagClassCode(cooper.getWcode(), "B105");
	}

	@Override
	public CooperReqVO getCooperReq(String wcode) throws SQLException {
		CooperReqVO cooperReq = workDAO.selectCooperReq(wcode);
		if(cooperReq == null) {
			return null;
		}else {
			EmployeeVO cooperRequester = workDAO.selectCooperRequesterByEno(cooperReq.getEno());
			cooperReq.setRequester(cooperRequester);
		}

		return cooperReq;
	}

	@Override
	public EmployeeVO getEmpByNodeId(int eno) throws SQLException {
		return workDAO.selectEmpByNodeId(eno);
	}

	@Override
	public void modifyCooperReqWork(WorkModifyCommand modifyCommand) throws Exception {
		//data -> WorkVO
		WorkVO work = workDAO.selectWorkByWcode(modifyCommand.getWcode());
		work.setWcontent(modifyCommand.getWcontent());
		work.setWprogress(Integer.parseInt(modifyCommand.getWprogress()));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		work.setWend(sdf.parse(modifyCommand.getWend()));
		work.setHashTag(modifyCommand.getHashTag());

		//담당자 수정
		List<EmployeeVO> newWorkManagerList = modifyCommand.getWorkManagerList();
		for(EmployeeVO newManager : newWorkManagerList) {
			WorkManagerVO manager = new WorkManagerVO();
			manager.setWcode(work.getWcode());
			manager.setAnswer("대기");
			manager.setEno(newManager.getEno());
			manager.setIsafter(1);
			manager.setWmstep(0);
			manager.setWcheck(0);
			workDAO.insertNewWorkManager(manager);
		}


		//업무내용 수정
		workDAO.updateToReq(work);
		//해쉬태그 수정
		workDAO.updateWorkHashTag(work);

		//협업요청상태 변경
		workDAO.updateCooperReqResult(work.getWcode());



	}

	@Override
	public void myWorkApprove(String wcode, int eno) throws SQLException {
		workDAO.updateWorkApprove(wcode, eno, "승인");
		List<WorkManagerVO> workManagerList = workDAO.selectWorkManagerList(wcode);
		int answerCnt = 0;
		for(WorkManagerVO manager : workManagerList) {
			String answer = manager.getAnswer();
			if(answer.equals("대기") || answer.equals("이의신청")) {
				answerCnt += 1;
			}
		}

		if(answerCnt == 0) {
			for(WorkManagerVO manager : workManagerList) {
				int managerEno = manager.getEno();
				workDAO.updateWorkApprove(wcode,managerEno, "승인");
			}

			workDAO.updateWorkWstatus(wcode, "진행" , "B102");
			workDAO.updateHashTagClassCode(wcode, "B102");
		}

	}


}

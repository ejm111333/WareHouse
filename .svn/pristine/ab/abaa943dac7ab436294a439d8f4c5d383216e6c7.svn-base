package kr.or.warehouse.service;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.warehouse.command.Criteria;
import kr.or.warehouse.command.PageMaker;
import kr.or.warehouse.dao.ContactDAO;
import kr.or.warehouse.dto.ContactgrVO;
import kr.or.warehouse.dto.EmployeeVO;
import kr.or.warehouse.dto.MycontactVO;

@Service
public class ContactServiceImpl implements ContactService{

	@Autowired
	private ContactDAO contactDAO;

	//전체주소록 리스트
	@Override
	public Map<String, Object> getContactList(Criteria cri) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<EmployeeVO> myconList = contactDAO.selectSearchContactList(cri);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(myconList.size());

		dataMap.put("myconList", myconList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;

	}

	//전체주소록 팀 클릭시 리스트
	@Override
	public Map<String, Object> getTeamContactList(Criteria cri, String dname) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<EmployeeVO> myconList = contactDAO.selectTeamContactList(cri, dname);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(myconList.size());

		dataMap.put("myconList", myconList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;
	}

	//개인주소록 그룹된 사원 리스트
	@Override
	public Map<String, Object> getGroupInfoList(Criteria cri, String cogroupcode) throws SQLException {
		Map<String, Object> groupInfoMap = new HashMap<String, Object>();
		List<EmployeeVO> mygroupList = contactDAO.selectGroupInfoList(cri,cogroupcode);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(mygroupList.size());

		groupInfoMap.put("mygroupList",mygroupList);
		groupInfoMap.put("pageMaker", pageMaker);

		return groupInfoMap;
	}


	//개인주소록 그룹 등록
	@Override
	public String regist(ContactgrVO contactgr) throws SQLException {
		String cogroupcode = contactDAO.selectContactGrNo();
		contactgr.setCogroupcode(cogroupcode);
		contactDAO.insertGroup(contactgr);

		return cogroupcode;
	}

	//그룹된 사원들 정보 등록
	@Override
	public void registInfo(String cogroupcode, List<String> groupMember) throws SQLException {
		for(String strEno : groupMember) {
			int eno = Integer.parseInt(strEno);
			MycontactVO mycontact = new MycontactVO();
			mycontact.setCogroupcode(cogroupcode);
			mycontact.setEno(eno);
			contactDAO.insertGrInfo(mycontact);
		}
	}


	//그룹 지정
	@Override
	public String registGroupAssign(String cogroupcode, List<String> groupMember) throws SQLException {
		for(String strEno : groupMember) {
			int eno = Integer.parseInt(strEno);
			MycontactVO mycontact = new MycontactVO();

			mycontact.setCogroupcode(cogroupcode);
			mycontact.setEno(eno);

			contactDAO.insertGrInfo(mycontact);
		}
		return cogroupcode;
	}






	// 개인주소록 그룹 리스트
	@Override
	public Map<String, Object> getContactGroupList(Criteria cri) throws SQLException {

		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<EmployeeVO> mygroupList = contactDAO.selectGroupList(cri);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(mygroupList.size());

		dataMap.put("mygroupList", mygroupList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;
	}

	//개인주소록 전체리스트
	@Override
	public Map<String, Object> getPersonalList(Criteria cri) throws SQLException {
		Map<String, Object> dataPersonal = new HashMap<String, Object>();
		List<EmployeeVO> myPersonalList = contactDAO.selectPersonalList(cri);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(myPersonalList.size());

		dataPersonal.put("myPersonalList", myPersonalList);
		dataPersonal.put("pageMaker", pageMaker);

		return dataPersonal;
	}


	//개인주소록 그룹 안 사원 삭제
	@Override
	public void remove(List<String> empList, String cogroupcode) throws SQLException {
		for(String enoStr : empList) {
			MycontactVO mycontact = new MycontactVO();
			int eno = Integer.parseInt(enoStr);
			mycontact.setEno(eno);
			mycontact.setCogroupcode(cogroupcode);
			contactDAO.deleteGrEmployee(mycontact);
		}
	}

	@Override
	public void removeGr(String cogroupcode) throws SQLException {
		contactDAO.deleteGr(cogroupcode);
	}



}

package kr.or.warehouse.scheduler;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import kr.or.warehouse.dto.HrVO;
import kr.or.warehouse.service.HrService;

public class HrLogTaskScheduler {

	private HrService hrService;
	public void setHrService(HrService hrService) {
		this.hrService = hrService;
	}

	private String savePath = "c:\\log";
	public void setSavePath(String savePath) {
		this.savePath = savePath;
	}

	private String fileName = "hr_log.csv";
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}


	public void hrLogToDataBase() throws Exception{
		File logFile = new File(savePath+File.separator+fileName);
		if(!logFile.exists()) {
			new File(savePath).mkdirs();
			String logFilePath=savePath+File.separator+fileName;
			BufferedWriter out=new BufferedWriter(new FileWriter(logFilePath,true));

			out.write("");
			out.close();
		}

		FileReader reader = new FileReader(savePath + File.separator + fileName);
		BufferedReader in = new BufferedReader(reader);

		//그릇 준비
		String textLine = null;
		Map<String, HrVO> logMap = new HashMap<String, HrVO>();

		//기준일 계산
		Date today = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(today);
		cal.add(Calendar.DATE, -1);
		Date date = cal.getTime();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		String strDate = format.format(date);

		//계산 시작
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
		try {
			while((textLine = in.readLine()) != null) {
				String[] logData =textLine.split(",");
				if(logData[5].split(" ")[0].equals(strDate)) { //필요한 날짜만 도출

					String eno = logData[1];
					if(logMap.get(eno) == null) {
						logMap.put(eno, new HrVO());
						logMap.get(eno).setEno(Integer.parseInt(eno));
					}

					logMap.get(eno).setHrDate(strDate);

					if(logData[0].equals("[ontime]")) {
						if(logMap.get(eno).getOnTime() == null
								|| sdf.parse(logData[3]).before(sdf.parse(logMap.get(eno).getOnTime()))) {
							logMap.get(eno).setOnTime(logData[3]);
						}

					} else if(logData[0].equals("[offtime]")) {
						if(logMap.get(eno).getOffTime() == null
								|| sdf.parse(logData[3]).after(sdf.parse(logMap.get(eno).getOffTime()))) {
							logMap.get(eno).setOffTime(logData[3]);
						}
					}
				}

			}
		} finally {
			if(reader != null) reader.close();
			if(in != null) in.close();
		}

		System.out.println(logMap);
		hrService.write(logMap);
	}

}

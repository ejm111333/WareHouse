package kr.or.warehouse.controller.rest;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.warehouse.command.Criteria;
import kr.or.warehouse.dto.EmployeeVO;
import kr.or.warehouse.dto.WorkReplyVO;
import kr.or.warehouse.dto.WorkVO;
import kr.or.warehouse.service.WorkReplyService;
import kr.or.warehouse.service.WorkService;

@RestController
@RequestMapping("/work")
public class WorkRestController {

	@Autowired
	private WorkReplyService workReplyService;

	@Autowired
	private WorkService workService;

	@RequestMapping("/replyList")
	public ResponseEntity<Map<String, Object>> replyList(@RequestParam String wcode, Criteria cri) throws Exception{
		cri.setPerPageNum(5);

		ResponseEntity<Map<String, Object>> result = null;
		try {
			Map<String, Object> dataMap = workReplyService.getReplyList(wcode, cri);
			System.out.println(dataMap);
			result = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			result = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return result;
	}

	@RequestMapping("/replyRegist")
	public ResponseEntity<String> replyRegist(WorkReplyVO reply, HttpSession session) throws Exception{
		ResponseEntity<String> result = null;
		System.out.println(reply);
		EmployeeVO loginUser = (EmployeeVO)session.getAttribute("loginUser");
		try {
			workReplyService.registReply(reply, loginUser.getEno());
			result = new ResponseEntity<String>(HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			result = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return result;
	}

	@RequestMapping(value = "/myWorkModify", method=RequestMethod.POST)
	public ResponseEntity<String> myWorkModify(WorkVO work) throws Exception{
		ResponseEntity<String> result = null;

		try {
			workService.modifyMyWork(work);
			result = new ResponseEntity<String>(HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			result = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}


		return result;
	}

}

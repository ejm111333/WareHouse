package kr.or.warehouse.controller.rest;

import java.io.File;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;

import kr.or.warehouse.command.FileDownloadResolver;
import kr.or.warehouse.command.PnoListCommand;
import kr.or.warehouse.dto.PdsVO;
import kr.or.warehouse.service.PdsService;

@RestController
@RequestMapping("/pds")
public class PdsRestController {
	
	@Autowired
	private PdsService pdsService;
	
	//경로상의 자료 목록
	@RequestMapping("/getPds")
	public ResponseEntity<List<PdsVO>> getPds(PdsVO pds) throws Exception{
		ResponseEntity<List<PdsVO>> entity = null;
		List<PdsVO> pdsList = null;

		try {
			pdsList = pdsService.getPdsList(pds);
			
			//파일명 재정의
//			if(pdsList!=null) {
//		      for(PdsVO pds : pdsList) {
//		         String fileName = pds.getFileName().split("\\$\\$")[1];
//		         pds.setFileName(fileName);
//		      }
//			}
		      
			entity = new ResponseEntity<List<PdsVO>>(pdsList, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<PdsVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}

		return entity;
	}
	
	//경로에 자료 등록
	@Resource(name = "pdsUserSavePath")
	private String pdsUserSavePath;
	
	@Resource(name = "pdsAllUserSavePath")
	private String pdsAllUserSavePath;
	
	@RequestMapping(value = "/regist", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> regist(PdsVO pds, HttpServletRequest request) throws Exception{
		ResponseEntity<String> entity = null;
		
		//파일저장
//		String fileName = MakeFileName.toUUIDFileName(pds.getFileName(), "$$");
		
		String dist = pds.getDist();
		String[] split = dist.split("/");
		String res = "";
		for(int i = 1; i < split.length; i++) {
			System.out.println(split[i]);
			res += "/"+split[i];
		}
		
		String filePath = pdsUserSavePath+"/"+pds.getEno(); 
		//폴더 내부면 폴더경로 포함해주기
		if(split.length > 1) filePath += res;
		File target = new File(filePath, pds.getFileName()); 
		target.mkdirs();
		pds.getUploadFile().transferTo(target);
		
		//db저장
		try {
			//1.pno -> DAO
			//2.eno -> OK
			//3.name
//			pds.setFileName(fileName);
			//4.path
			pds.setUploadPath(filePath);
			//5.fileType
			String fileType = pds.getFileName().substring(pds.getFileName().lastIndexOf('.')+1).toLowerCase();
			pds.setFileType(fileType);
			//6.fileSize
			long size = pds.getUploadFile().getSize();
			pds.setFileSize(size);
			System.out.println(pds);
			pds.setFolderYn(0);
			pdsService.uploadFile(pds);
			entity = new ResponseEntity<String>("OK", HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	@RequestMapping("/getTrash")
	public ResponseEntity<List<PdsVO>> getTrash(PdsVO pds) throws Exception{
		ResponseEntity<List<PdsVO>> entity = null;
		List<PdsVO> pdsList = null;

		try {
			pdsList = pdsService.getTrashList(pds);
			entity = new ResponseEntity<List<PdsVO>>(pdsList, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<PdsVO>>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}

		return entity;
	}
	
	//휴지통 이동
	@RequestMapping(value ="/moveTrash", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> moveTrash(String pno)throws Exception{
		ResponseEntity<String> entity = null;
		
		try {
			pdsService.moveTrash(pno);
			entity = new ResponseEntity<String>("OK", HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//파일 삭제
	@RequestMapping(value = "/removeAllFile", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> removeAllFile(int eno) throws Exception{
		ResponseEntity<String> entity = null;
		List<PdsVO> pdsList = null;
		try {
			pdsList = pdsService.getAllTrashByEno(eno);
			if(pdsList != null) for(PdsVO pds : pdsList) {
				File target=new File(pds.getUploadPath(),pds.getFileName());
				if(target.exists()) {
					if(target.isFile()) {
						target.delete();
					}else {
						deleteFolder(target.getPath());
					}
					target.delete();
				}
			}
			pdsService.removeAllPdsByEno(eno);
			entity = new ResponseEntity<String>(pdsList.size()+"", HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//파일 삭제
	@RequestMapping(value = "/removeFile", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> removeFile(String pno) throws Exception{
		ResponseEntity<String> entity = null;
		PdsVO pds = null;
		
		try {
			pds = pdsService.getPdsByPno(pno);
			if(pds != null) {
				File target=new File(pds.getUploadPath(),pds.getFileName());
				if(target.exists()) {
					if(target.isFile()) {
						target.delete();
					}else {
						deleteFolder(target.getPath());
					}
					target.delete();
				}
				
			}
            pdsService.removePdsByPno(pno);
			entity = new ResponseEntity<String>("OK", HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//파일 상세 정보
	@RequestMapping(value ="/detail")
	public ResponseEntity<PdsVO> detail(String pno)throws Exception{
		ResponseEntity<PdsVO> entity = null;
		PdsVO pds = null;

		try {
			pds = pdsService.getPdsByPno(pno);
			//파일명 재정의
//			if(pds!=null) {
//				String fileName = pds.getFileName().split("\\$\\$")[1];
//				pds.setFileName(fileName);
//			}
			entity = new ResponseEntity<PdsVO>(pds, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<PdsVO>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//휴지통 이동
	@RequestMapping(value ="/recycleFile", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> recycleFile(String pno)throws Exception{
		ResponseEntity<String> entity = null;
		
		try {
			pdsService.recycleFile(pno);
			entity = new ResponseEntity<String>("OK", HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	
	
	//파일 다운로드
//	@RequestMapping(value ="/getFile")
//	public ResponseEntity<String> getFile(String pno, HttpServletRequest request, HttpServletResponse response)throws Exception{
//		ResponseEntity<String> entity = null;
//		System.out.println(pno);
//		PdsVO pds = pdsService.getPdsByPno(pno);
//		String fileName = pds.getFileName();
//		String savedPath = pds.getUploadPath();
//	
//		FileDownloadResolver.sendFile(fileName, savedPath, request, response);
//
//		try {
//			entity = new ResponseEntity<String>(fileName, HttpStatus.OK);
//		} catch (Exception e) {
//			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
//			e.printStackTrace();
//		}
//		
//		return entity;
//	}
	
//	@RequestMapping(value ="/fileDownload", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
//	public ResponseEntity<String> fileDownload(@RequestBody PnoListCommand plc,
//			HttpServletRequest request, HttpServletResponse response)throws Exception{
//		ResponseEntity<String> entity = null;
//		System.out.println(plc);
//		
//		List<String> pnoList = plc.getPno();
//		PdsVO pds = null;
//		String fileName = "";
//		String savedPath = "";
//		if(pnoList != null) for(String pno : pnoList) {
//			pds = pdsService.getPdsByPno(pno);
//			fileName = pds.getFileName();
//			savedPath = pds.getUploadPath();
//			
//			FileDownloadResolver.sendFile(fileName, savedPath, request, response);
//		}
//		
//		try {
//			entity = new ResponseEntity<String>("OK", HttpStatus.OK);
//		} catch (Exception e) {
//			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
//			e.printStackTrace();
//		}
//		
//		return entity;
//	}
	@RequestMapping(value ="/getPnoForfileDownload", method = RequestMethod.POST, produces = "application/json; charset=utf-8")
	public ResponseEntity<List<String>> getPnoForfileDownload(@RequestBody PnoListCommand plc,
			HttpServletRequest request, HttpServletResponse response)throws Exception{
		ResponseEntity<List<String>> entity = null;
		System.out.println(plc);
		
		List<String> pnoList = plc.getPno();
				
		try {
			entity = new ResponseEntity<List<String>>(pnoList, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<List<String>>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//폴더 생성
	@RequestMapping(value = "/newFolder", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> newFolder(PdsVO pds)throws Exception{
		ResponseEntity<String> entity = null;
		
		//파일저장
//		String fileName = MakeFileName.toUUIDFileName(pds.getFileName(), "$$");
		String dist = pds.getDist();
		String[] split = dist.split("/");
		String res = "";
		for(int i = 1; i < split.length; i++) {
			System.out.println(split[i]);
			res += "/"+split[i];
		}
		
		String filePath = pdsUserSavePath+"/"+pds.getEno(); 
		//폴더 내부면 폴더경로 포함해주기
		if(split.length > 1) filePath += res;
		File target = new File(filePath, pds.getFileName()); 
		target.mkdirs();
	

		try {
//			pds.setFileName(fileName);
			pds.setUploadPath(filePath);
			pds.setFileType("folder");
			pds.setFileSize(target.length());
			pds.setFolderYn(1);
			pdsService.uploadFile(pds);
			entity = new ResponseEntity<String>("OK", HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//자료실 남은 용량 계산_개인
	@RequestMapping(value ="/pdsLength")
	public ResponseEntity<String> pdsLength(int eno) throws Exception{
		ResponseEntity<String> entity = null;
		String result = "";
		String path = pdsAllUserSavePath+"/"+eno;
		File dir = new File(path);
		if(!dir.exists()) dir.mkdirs();
	    result = getFolderSize(dir)+"";
	    
		try {
			entity = new ResponseEntity<String>(result, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	//자료실 남은 용량 계산_전사
	@RequestMapping(value ="/pdsLengthForAll")
	public ResponseEntity<String> pdsLengthForAll(int eno) throws Exception{
		ResponseEntity<String> entity = null;
		String result = "";
		String path = pdsAllUserSavePath;
		File dir = new File(path);
		if(!dir.exists()) dir.mkdirs();
		result = getFolderSize(dir)+"";
		
		try {
			entity = new ResponseEntity<String>(result, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	private long getFolderSize(File folder) {
	    long length = 0;
	    length += folder.length();
	    File[] files = folder.listFiles();
	    int count = files.length;
	    for (int i = 0; i < count; i++) {
	        if (files[i].isFile()) {
	            length += files[i].length();
	        } else {
	            length += getFolderSize(files[i]);
	        }
	    }
	    return length;
	}
	
	private void deleteFolder(String path) {
		File folder = new File(path);
		try {
			if (folder.exists()) {
				File[] folder_list = folder.listFiles(); // 파일리스트 얻어오기

				for (int i = 0; i < folder_list.length; i++) {
					if (folder_list[i].isFile()) {
						folder_list[i].delete();
						System.out.println("파일이 삭제되었습니다.");
					} else {
						deleteFolder(folder_list[i].getPath()); // 재귀함수호출
						System.out.println("폴더가 삭제되었습니다.");
					}
					folder_list[i].delete();
				}
				folder.delete(); // 폴더 삭제
			}
		} catch (Exception e) {
			e.getStackTrace();
		}
	}
	
//	@RequestMapping(value="fileDownload")
//	public void fileDownload( HttpServletResponse response, HttpServletRequest request, @RequestParam Map<String, String> paramMap) {
//	 
//	    String path = paramMap.get("filePath"); //full경로
//	    String fileName = paramMap.get("fileName"); //파일명
//	 
//	    File file = new File(path);
//	 
//	    FileInputStream fileInputStream = null;
//	    ServletOutputStream servletOutputStream = null;
//	 
//	    try{
//	        String downName = null;
//	        String browser = request.getHeader("User-Agent");
//	        //파일 인코딩
//	        if(browser.contains("MSIE") || browser.contains("Trident") || browser.contains("Chrome")){//브라우저 확인 파일명 encode  
//	            
//	            downName = URLEncoder.encode(fileName,"UTF-8").replaceAll("\\+", "%20");
//	            
//	        }else{
//	            
//	            downName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
//	            
//	        }
//	        
//	        response.setHeader("Content-Disposition","attachment;filename=\"" + downName+"\"");             
//	        response.setContentType("application/octer-stream");
//	        response.setHeader("Content-Transfer-Encoding", "binary;");
//	 
//	        fileInputStream = new FileInputStream(file);
//	        servletOutputStream = response.getOutputStream();
//	 
//	        byte b [] = new byte[1024];
//	        int data = 0;
//	 
//	        while((data=(fileInputStream.read(b, 0, b.length))) != -1){
//	            
//	            servletOutputStream.write(b, 0, data);
//	            
//	        }
//	 
//	        servletOutputStream.flush();//출력
//	        
//	    }catch (Exception e) {
//	        e.printStackTrace();
//	    }finally{
//	        if(servletOutputStream!=null){
//	            try{
//	                servletOutputStream.close();
//	            }catch (IOException e){
//	                e.printStackTrace();
//	            }
//	        }
//	        if(fileInputStream!=null){
//	            try{
//	                fileInputStream.close();
//	            }catch (IOException e){
//	                e.printStackTrace();
//	            }
//	        }
//	    }
//	}

}

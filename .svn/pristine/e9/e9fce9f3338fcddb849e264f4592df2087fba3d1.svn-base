package kr.or.warehouse.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.or.warehouse.command.Criteria;
import kr.or.warehouse.dto.MentoringVO;
import kr.or.warehouse.dto.SubMentoringVO;
import kr.or.warehouse.dto.WorkVO;


@Repository
public class MentoringDAOImpl implements MentoringDAO{
	private static final Logger LOGGER = LoggerFactory.getLogger(MentoringDAOImpl.class);

	@Autowired
	private SqlSession session;

	@Override
	public List<SubMentoringVO> selectMyMento(int eno) throws Exception {
	//public List<SubMentoringVO> selectMyMento(Criteria cri, int eno) throws Exception {

//		int offset = cri.getStartRowNum();
//		int limit = cri.getPerPageNum();
//		RowBounds rowBounds = new RowBounds(offset, limit);
//
//		Map<String, Object> param = new HashMap<String, Object>();
//		param.put("eno", eno);
//
//		return session.selectList("Mentoring-Mapper.selectMyMento", cri, rowBounds);
		return session.selectList("Mentoring-Mapper.selectMyMento", eno);
	}

	@Override
	public int selectMyMentoCount(Criteria cri, int eno) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("eno",eno);
		return session.selectOne("Mentoring-Mapper.selectMyMentoCount", param);
	}

	@Override
	public List<SubMentoringVO> selectMyMentee(int eno) throws Exception {
	//public List<MentoringVO> selectMyMentee(Criteria cri, int eno) throws Exception {

//		int offset = cri.getStartRowNum();
//		int limit = cri.getPerPageNum();
//		RowBounds rowBounds = new RowBounds(offset, limit);
//
//		Map<String, Object> param = new HashMap<String, Object>();
//		param.put("eno", eno);
//
//		return session.selectList("Mentoring-Mapper.selectMyMentee", cri, rowBounds);
		return session.selectList("Mentoring-Mapper.selectMyMentee", eno);
	}

	@Override
	public int selectMyMenteeCount(Criteria cri, int eno) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("eno",eno);
		return session.selectOne("Mentoring-Mapper.selectMyMenteeCount", param);
	}

	@Override
	public List<SubMentoringVO> selectMentoRank() throws Exception {
		return session.selectList("Mentoring-Mapper.selectMentoRank");
	}

	@Override
	public List<SubMentoringVO> subMentoringList(Criteria cri, int eno) throws Exception {
		int offset = cri.getStartRowNum();
		int limit = cri.getPerPageNum();
		RowBounds rowBounds = new RowBounds(offset, limit);

		Map<String, Object> param = new HashMap<String, Object>();
		param.put("eno", eno);

		return session.selectList("Mentoring-Mapper.subMentoringList", param, rowBounds);
	}

	@Override
	public int subMentoringListCount(Criteria cri, int eno) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("eno",eno);
		return session.selectOne("Mentoring-Mapper.subMentoringListCount", param);
	}

	@Override
	public List<SubMentoringVO> endMentoringList(Criteria cri, int eno) throws Exception {
		int offset = cri.getStartRowNum();
		int limit = cri.getPerPageNum();
		RowBounds rowBounds = new RowBounds(offset, limit);

		Map<String, Object> param = new HashMap<String, Object>();
		param.put("eno", eno);

		return session.selectList("Mentoring-Mapper.endMentoringList", param, rowBounds);
	}

	@Override
	public int endMentoringListCount(Criteria cri, int eno) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("eno",eno);
		return session.selectOne("Mentoring-Mapper.endMentoringListCount", param);
	}

	@Override
	public List<WorkVO> myWorkList(int eno) throws Exception {
		System.out.println("workDao");
		return session.selectList("Mentoring-Mapper.myWorkList", eno);
	}

	@Override
	public void applyMentoring(SubMentoringVO subMentoring) throws Exception {
		session.update("Mentoring-Mapper.applyMentoring",subMentoring);
	}

	@Override
	public String selectSmno() throws Exception {
		return session.selectOne("Mentoring-Mapper.selectSmno");
	}






}
